class Solution {
    private int lowerBound(int[] arr, int target) {
        int l = 0;
        int h = arr.length - 1;
        int res = arr.length;
        
        while (l <= h) {
            int m = l + (h - l) / 2;
            if (arr[m] >= target) {
                res = m;
                h = m - 1;
            } else {
                l = m + 1;
            }
        }
        return res;
    }
    
    private int upperBound(int[] arr, int target) {
        int l = 0; 
        int h = arr.length - 1;
        int res = arr.length;
        
        while (l <= h) {
            int m = l + (h - l) / 2;
            if (arr[m] > target) {
                res = m;
                h = m - 1;
            } else {
                l = m + 1;
            }
        }
        return res;
    }
    int countFreq(int[] arr, int target) {
        return upperBound(arr, target) - lowerBound(arr, target);
    }
}

                      // NAIVE APPROACH
        // int c = 0;
        
        // for (int i : arr) {
        //     if (i == target) {
        //         c++;
        //     }
        // }
        // return c;
