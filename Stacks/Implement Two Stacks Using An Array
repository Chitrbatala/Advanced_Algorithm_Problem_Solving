class TwoStacks {
    private int[] arr;
    private int top1;  // Stack 1 top pointer (starts from left)
    private int top2;  // Stack 2 top pointer (starts from right)

    public TwoStacks(int capacity) {
        arr = new int[capacity];
        top1 = -1;
        top2 = capacity;
    }

    // Push to Stack 1
    public void push1(int x) {
        if (top1 + 1 == top2) {
            throw new StackOverflowError("Stack is full");
        }
        arr[++top1] = x;
    }

    // Push to Stack 2
    public void push2(int x) {
        if (top1 + 1 == top2) {
            throw new StackOverflowError("Stack is full");
        }
        arr[--top2] = x;
    }

    // Pop from Stack 1
    public int pop1() {
        if (top1 == -1) {
            throw new IllegalStateException("Stack 1 is empty");
        }
        return arr[top1--];
    }

    // Pop from Stack 2
    public int pop2() {
        if (top2 == arr.length) {
            throw new IllegalStateException("Stack 2 is empty");
        }
        return arr[top2++];
    }

    // Peek Stack 1
    public int peek1() {
        if (top1 == -1) {
            throw new IllegalStateException("Stack 1 is empty");
        }
        return arr[top1];
    }

    // Peek Stack 2
    public int peek2() {
        if (top2 == arr.length) {
            throw new IllegalStateException("Stack 2 is empty");
        }
        return arr[top2];
    }

    // Check if Stack 1 is empty
    public boolean isEmpty1() {
        return top1 == -1;
    }

    // Check if Stack 2 is empty
    public boolean isEmpty2() {
        return top2 == arr.length;
    }
}
