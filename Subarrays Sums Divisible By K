class Solution {
    public int subarraysDivByK(int[] nums, int k) {
       int n = nums.length;
       int count = 0;
       int pS = 0;

       Map<Integer, Integer> pM = new HashMap<>();

       pM.put(0, 1);

       for (int num : nums) {
        pS += num;
        int remainder = (pS % k + k) % k;

        if (pM.containsKey(remainder)) {
            count += pM.get(remainder);
        } 
        pM.put(remainder, pM.getOrDefault(remainder, 0) + 1);
       }
       return count;
    }
}


                  // Brute force approach
        // int n = nums.length;
        // int count = 0;

        // for (int i = 0; i < n; i++) {
        //     int currSum = 0;
        //     for (int j = i; j < n; j++) {
        //         currSum += nums[j];

        //         if (currSum % k == 0) {
        //             count++;
        //         }
        //     }
        // }
        // return count;
