class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Map<Integer, Integer> nextGreater = new HashMap<>();
        Stack<Integer> stack = new Stack<>();

        for (int i = nums2.length - 1; i >= 0; i--) {
            int num = nums2[i];

            while (!stack.isEmpty() && stack.peek() <= num) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                nextGreater.put(num, -1);
            } else {
                nextGreater.put(num, stack.peek());
            }

            stack.push(num);
        }

        int[] result = new int[nums1.length];
        for (int i = 0; i < nums1.length; i++) {
            result[i] = nextGreater.get(nums1[i]);
        }
        return result;
    }
}
                                 // Brute Force
        // int n = nums1.length;
        // int m = nums2.length;
        // int[] newArr = new int[n];

        // for (int i = 0; i < n; i++) {
        //     newArr[i] = -1;
        //     for (int j = 0; j < m; j++) {
        //         if (nums1[i] == nums2[j]) {
        //             for (int k = j + 1; k < m; k++) {
        //                 if (nums2[j] < nums2[k]) {
        //                     newArr[i] = nums2[k];
        //                     break;
        //                 } 
        //             }
        //         }
        //     }
        // }
        // return newArr;
