class Solution {
    public int maxPerformance(int n, int[] speed, int[] efficiency, int k) {
        int[][] engineers = new int[n][2];
        for (int i = 0; i < n; i++) {
            engineers[i][0] = speed[i];      
            engineers[i][1] = efficiency[i]; 
        }
        Arrays.sort(engineers, (engineer1, engineer2) -> engineer2[1] - engineer1[1]);

        long speedSum = 0;
        long maxPerformance = 0;
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();

        for (int[] engineer : engineers) {
            int currentSpeed = engineer[0];
            int currentEfficiency = engineer[1];

            if (minHeap.size() == k) {
                speedSum -= minHeap.poll(); 
            }

            speedSum += currentSpeed;
            minHeap.offer(currentSpeed);

            maxPerformance = Math.max(maxPerformance, speedSum * currentEfficiency);
        }

        return (int) (maxPerformance % 1_000_000_007);
    }
}
