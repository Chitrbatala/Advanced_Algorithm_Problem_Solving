class Solution {
    public String reorganizeString(String s) {
        Map<Character, Integer> map = new HashMap<>();
        for (char c : s.toCharArray()) {
            int count = map.getOrDefault(c, 0) + 1;

            if (count > (s.length() + 1) / 2) {
                return "";
            }
            map.put(c, count);
        }

        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[0] - a[0]);
        for (char c : map.keySet()) {
            pq.add(new int[] {map.get(c), c});
        }
        StringBuilder sb = new StringBuilder();

        while (pq.size() >= 2){
            int[] f = pq.poll();
            int[] sec = pq.poll();

            sb.append((char) f[1]);
            sb.append((char) sec[1]);

            f[0]--;
            sec[0]--;

            if(f[0] > 0) pq.add(f);
            if(sec[0] > 0) pq.add(sec);
        }

        if (!pq.isEmpty()) {
            int[] f = pq.poll();
            sb.append((char) f[1]);
        }
        return sb.toString();
    }
}
