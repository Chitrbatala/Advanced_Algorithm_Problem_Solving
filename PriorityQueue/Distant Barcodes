class Solution {
    public int[] rearrangeBarcodes(int[] barcodes) {
        if (barcodes == null || barcodes.length <= 1) {
            return barcodes; // No rearrangement needed for 0 or 1 element
        }

        // Step 1: Count Frequencies
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        for (int barcode : barcodes) {
            frequencyMap.put(barcode, frequencyMap.getOrDefault(barcode, 0) + 1);
        }

        // Step 2: Store Frequencies and Barcodes as Pairs
        // Using a List of Map.Entry for convenience in sorting
        List<Map.Entry<Integer, Integer>> sortedEntries = new ArrayList<>(frequencyMap.entrySet());

        // Step 3: Sort Pairs by Frequency (Descending)
        // If frequencies are equal, the order of barcodes doesn't matter for correctness.
        Collections.sort(sortedEntries, (entry1, entry2) -> entry2.getValue().compareTo(entry1.getValue()));

        // Step 4: Initialize Result Array
        int[] result = new int[barcodes.length];
        int idx = 0; // Current index for placing elements in the result array

        // Step 5: Placement Strategy (Even then Odd Indices)
        for (Map.Entry<Integer, Integer> entry : sortedEntries) {
            int barcode = entry.getKey();
            int count = entry.getValue();

            // Place 'count' number of 'barcode'
            for (int i = 0; i < count; i++) {
                // If we've exhausted all even positions, switch to odd positions
                if (idx >= result.length) {
                    idx = 1; // Start from the first odd index
                }
                result[idx] = barcode;
                idx += 2; // Move to the next alternating position
            }
        }

        // Step 6: Return Result
        return result;
    }
}
