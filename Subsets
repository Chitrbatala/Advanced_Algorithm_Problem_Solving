class Solution {
    private void backtrack(List<List<Integer>> res, List<Integer> temp, int[] nums, int start) {
        res.add(new ArrayList<>(temp));
        for (int i = start; i < nums.length; i++) {
            temp.add(nums[i]);
            backtrack(res, temp, nums, i + 1);
            temp.remove(temp.size() - 1);
        }
    }
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        backtrack(res, new ArrayList<>(), nums, 0);
        return res;
    }
}

                       // BRUTE FORCE
        // List<List<Integer>> res = new ArrayList<>();
        // res.add(new ArrayList<>());

        // for (int num: nums) {
        //     int n = res.size();

        //     for (int i = 0; i < n; i++) {
        //         List<Integer> newSubset = new ArrayList<>(res.get(i));
        //         newSubset.add(num);
        //         res.add(newSubset);
        //     }
        // }
        // return res;
