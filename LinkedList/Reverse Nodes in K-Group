class Solution {
    static ListNode reverseList(ListNode node) {
        ListNode prev = null;
        ListNode curr = node;
        ListNode next = null;

        // Reverse the pointers in the list
        while (curr != null) {
            next = curr.next;      // store next node
            curr.next = prev;      // reverse pointer
            prev = curr;           // move prev forward
            curr = next;           // move curr forward
        }

        return prev; // new head of the reversed list
    }

    // Helper method to find the kth node from current node
    private static ListNode kthNode(ListNode node, int k) {
        k--; // we already consider the first node as 1st
        while (node != null && k > 0) {
            node = node.next;
            k--;
        }
        return node; // returns null if there are fewer than k nodes
    }

    // Main method to reverse nodes in k-sized groups
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode temp = head;           // current node we're starting from
        ListNode prevGroup = null;      // end of the previous reversed group

        // Traverse the list in groups of k
        while (temp != null) {
            // Find the kth node from temp
            ListNode kth = kthNode(temp, k);

            // If we can't form a complete group, link the last group's end and break
            if (kth == null) {
                if (prevGroup != null) {
                    prevGroup.next = temp; // connect previous group to remaining nodes
                }
                break; // exit the loop
            }

            ListNode next = kth.next; // store the next groupâ€™s start
            kth.next = null;          // cut the list to isolate current group

            // Reverse current k-group
            ListNode reversed = reverseList(temp);

            // If this is the first group, update head
            if (temp == head) {
                head = reversed;
            } else {
                // Connect previous group to reversed group
                prevGroup.next = reversed;
            }

            // Update prevGroup to point to the end of current reversed group
            prevGroup = temp;

            // Move temp to the start of the next group
            temp = next;
        }

        return head; // return the new head after all group reversals
    }
}

