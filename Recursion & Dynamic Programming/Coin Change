class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, amount + 1); 
        dp[0] = 0;

        for (int i = 1; i <= amount; i++) {
            for (int coin : coins) {
                if (i - coin >= 0) {
                    dp[i] = Math.min(dp[i], 1 + dp[i - coin]);
                }
            }
        }

        return dp[amount] > amount ? -1 : dp[amount];
    }
}



            // => TOP - DOWN =>
        // int[] dp = new int[amount + 1];
        // Arrays.fill(dp, -1);
        // int ans = solve(coins, amount, dp);
        // return ans == Integer.MAX_VALUE ? -1 : ans; 
        // }

        // private int solve(int[] coins, int amount, int[] dp) {
        // if (amount == 0) return 0;
        // if (amount < 0) return Integer.MAX_VALUE;

        // if (dp[amount] != -1) return dp[amount];

        // int min = Integer.MAX_VALUE;

        // for (int coin : coins) {
        //     int res = solve(coins, amount - coin, dp);
        //     if (res != Integer.MAX_VALUE) {
        //         min = Math.min(min, 1 + res);
        //     } 
        // }

        // dp[amount] = min;
        // return dp[amount];
