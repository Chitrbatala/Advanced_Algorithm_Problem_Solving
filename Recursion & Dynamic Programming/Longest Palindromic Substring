class Solution {
    private Boolean[][] dp; // memoization table

    private boolean solve(String s, int l, int r) {
        if (l >= r) return true;   // base case

        if (dp[l][r] != null) return dp[l][r]; // already computed

        if (s.charAt(l) == s.charAt(r)) {
            dp[l][r] = solve(s, l + 1, r - 1);
        } else {
            dp[l][r] = false;
        }
        return dp[l][r];
    }

    public String longestPalindrome(String s) {
        int n = s.length();
        dp = new Boolean[n][n];  // initialize memo table

        int maxLength = 0;
        int sP = 0;

        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (solve(s, i, j)) {
                    if (j - i + 1 > maxLength) {
                        maxLength = j - i + 1;
                        sP = i;
                    }
                }
            }
        }
        return s.substring(sP, sP + maxLength);
    }
}
