class Solution {
    public int climbStairs(int n) {
       if (n == 1) return 1;
       if (n == 2) return 2;

       int a = 1;
       int b = 2;

       for (int i = 3; i <= n; i++) {
        int c = a + b;
        a = b;
        b = c;
       }
       return b;
    }
}



            // BOTTOM - UP APPROACH =>
        // if (n == 1) return 1;
        // if (n == 2) return 2;

        // int[] dp =  new int[n + 1];
        // dp[1] = 1;
        // dp[2] = 2;

        // for (int i = 3; i <= n; i++) {
        //     dp[i] = dp[i - 1] + dp[i - 2];
        // }
        // return dp[n];


            //  <= TOP-DOWN APPROACH =>
        // int[] dp = new int[n + 1];
        // Arrays.fill(dp, -1);
        // return solve(n, dp);
        // }
        // private int solve(int n, int[] dp) {
        // if (n == 1) return 1;
        // if (n == 2) return 2;

        // if (dp[n] != -1) return dp[n];
        // dp[n] = solve(n - 1, dp) + solve(n - 2, dp);
        // return dp[n];


        // if (n == 1) return 1;
        // if (n == 2) return 2;

        // return climbStairs(n - 1) + climbStairs(n - 2);


        // if (n < 0) return 0;
        // if (n == 0) return 1;

        // int one_step = climbStairs(n - 1);
        // int two_step = climbStairs(n - 2);

        // return one_step + two_step;

        // if (n == 1) return 1;
        // if (n == 2) return 2;
