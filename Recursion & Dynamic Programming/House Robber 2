class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if (n == 1) return nums[0];

        int case1 = robLinear(nums, 0, n - 2);

        int case2 = robLinear(nums, 1, n - 1);

        return Math.max(case1, case2);
    }

    private int robLinear(int[] nums, int start, int end) {
        int previous2 = 0;
        int previous1 = 0;

        for (int i = start; i <= end; i++) {
            int curr = Math.max(nums[i] + previous2, previous1);
            previous2 = previous1;
            previous1 = curr;
        }
        return previous1;
    }
}


                // BOTTOM - UP =>
        // int n = nums.length;
        // if (n == 1) return nums[0]; 

        // int case1 = robLinear(nums, 0, n - 2);

        // int case2 = robLinear(nums, 1, n - 1);

        // return Math.max(case1, case2);
        // }

        // private int robLinear(int[] nums, int start, int end) {
        // int len = end - start + 1;
        // if (len == 1) return nums[start];

        // int[] dp = new int[len];
        // dp[0] = nums[start];
        // dp[1] = Math.max(nums[start], nums[start + 1]);

        // for (int i = 2; i < len; i++) {
        //     dp[i] = Math.max(nums[start + i] + dp[i - 2], dp[i - 1]);
        // }

        // return dp[len - 1];


                // TOP-DOWN =>
        // int n = nums.length;
        // if (n == 1) return nums[0]; 

        // int[] dp1 = new int[n];
        // Arrays.fill(dp1, -1);
        // int case1 = solve(nums, n - 2, 0, dp1);

        // int[] dp2 = new int[n];
        // Arrays.fill(dp2, -1);
        // int case2 = solve(nums, n - 1, 1, dp2);

        // return Math.max(case1, case2);
        // }

        // private int solve(int[] nums, int i, int start, int[] dp) {
        // if (i < start) return 0;           
        // if (i == start) return nums[start]; 

        // if (dp[i] != -1) return dp[i]; 
        // int robThisHouse = nums[i] + solve(nums, i - 2, start, dp);
        // int skipThisHouse = solve(nums, i - 1, start, dp);

        // dp[i] = Math.max(robThisHouse, skipThisHouse);
        // return dp[i];
