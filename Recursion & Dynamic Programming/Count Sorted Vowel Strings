class Solution {
    private int[][] dp;
    public int countVowelStrings(int n) {
        dp = new int[n + 1][6];
        for (int[] row : dp) Arrays.fill(row, -1);
        return solve(n, 5);
    }
    private int solve(int n, int k) {
        if (n == 0) return 1;
        if (k == 0) return 0;

        if (dp[n][k] != -1) return dp[n][k];
        dp[n][k] = solve(n, k -1) + solve(n - 1, k);
        return dp[n][k];
    }
}

          // Recurion Approach
    // return solve(n, 5);
    // }
    // private int solve(int n, int k) {
    //     if (n == 0) return 1;
    //     if (k == 0) return 0;

    // eturn solve(n, k -1) + solve(n - 1, k);

    // Bottom Up Approach
        // int[][] dp = new int[n + 1][6]; // dp[length][vowels]

        // // base case: f(0, k) = 1
        // for (int k = 0; k <= 5; k++) {
        //     dp[0][k] = 1;
        // }

        // // build table iteratively
        // for (int len = 1; len <= n; len++) {
        //     for (int k = 1; k <= 5; k++) {
        //         dp[len][k] = dp[len][k - 1] + dp[len - 1][k];
        //     }
        // }

        // return dp[n][5]; // answer: strings of length n with 5 vowel
