class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
       if (n == 1) return nums[0];

       int previous2 = nums[0];
       int previous1 = Math.max(nums[0], nums[1]);

       for (int i = 2; i < n; i++) {
        int curr = Math.max(nums[i] + previous2, previous1);
        previous2 = previous1;
        previous1 = curr;
       }
       return previous1;
    }
}



            // <= Recursive Approach =>
        // int n = nums.length;
        // return solve(nums, n - 1);
        // }
        // private int solve(int[] nums, int i) {
        // if (i < 0) return 0;
        // if (i == 0) return nums[0];

        // int robThisHouse = nums[i] + solve(nums, i - 2);
        // int skipThisHouse = solve(nums, i - 1);

        // return Math.max(robThisHouse, skipThisHouse);

            // <= TOP-DOWN APPROACH =>
        // int n = nums.length;
        // int[] dp = new int[n];
        // Arrays.fill(dp, -1);
        // return solve(nums, n - 1, dp);
        // }
        // private int solve(int[] nums, int i, int[] dp) {
        // if (i < 0) return 0;
        // if (i == 0) return nums[0];

        // if (dp[i] != -1) return dp[i];

        // int robThisHouse = nums[i] + solve(nums, i - 2, dp);
        // int skipThisHouse = solve(nums, i - 1, dp);

        // dp[i] = Math.max(robThisHouse, skipThisHouse);
        // return dp[i];


        // BOTTOM - UP APPROACH =>
        // int n = nums.length;
        // int[] dp = new int[n + 1];

        // if (n == 1) return nums[0];

        // dp[0] = nums[0];
        // dp[1] = Math.max(nums[0], nums[1]);

        // for (int i = 2; i <= n - 1; i++) {
        //     dp[i] = Math.max(nums[i] + dp[i - 2], dp[i - 1]);
        // }
        // return dp[n - 1];
