class Solution {
    public int subarraySum(int[] nums, int k) {
        int n = nums.length;
        int count = 0;
        int pS = 0;
        Map<Integer, Integer> pM = new HashMap<>();

        pM.put(0, 1);

        for (int i = 0; i < n; i++) {
            pS += nums[i];
            int target = pS - k;

            if (pM.containsKey(target)) {
                count += pM.get(target);
            }
            pM.put(pS, pM.getOrDefault(pS, 0) + 1);
        }
        return count;
    }
}
        
                                // Brute force approach
        // int n = nums.length;
        // int count = 0;

        // for (int i = 0; i < n; i++) {
        //     int currSum = 0;

        //     for (int j = i; j < n; j++) {
        //         currSum += nums[j];

        //         if (currSum == k) {
        //             count++;
        //         }
        //     }
        // }
        // return count;
