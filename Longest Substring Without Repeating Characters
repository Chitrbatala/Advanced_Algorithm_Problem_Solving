class Solution {
    public int lengthOfLongestSubstring(String s) {
       int left = 0;
       int right = 0;
       int max = 0;
       Set<Character> seen = new HashSet<>();

       while (right < s.length()) {
        char c = s.charAt(right);
        if (!seen.contains(c)) {
            seen.add(c);
            max = Math.max(max, right - left + 1);
            right++;
        } else {
            seen.remove(s.charAt(left));
            left++;
        }
       }
       return max;
    }
}

                    // BRUTE FORCE APPROACH
        // int n = s.length();
        // int maxLength = 0;

        // for (int i = 0; i < n; i++) {
        //     Set<Character> seen = new HashSet<>();
        //     for (int j = i; j < n; j++) {
        //         char c = s.charAt(j);

        //         if (seen.contains(c)) {
        //             break;
        //         } else {
        //             seen.add(c);
        //         }
        //         maxLength = Math.max(maxLength, j - i + 1);
        //     }
        // }
        // return maxLength;
